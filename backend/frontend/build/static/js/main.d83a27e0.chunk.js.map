{"version":3,"sources":["TodoComp/Modal.js","TodoComp/Todo.js","App.js","reportWebVitals.js","index.js"],"names":["CustomModal","props","useState","activeItem","setActiveItem","handleChange","e","target","name","value","type","checked","ActiveItem","toggle","onSave","Modal","isOpen","ModalHeader","ModalBody","Form","FormGroup","Label","for","Input","id","title","onChange","placeholder","description","check","completed","ModalFooter","Button","color","onClick","axios","defaults","xsrfCookieName","xsrfHeaderName","Todo","viewCompleted","setViewCompleted","todoList","setTodoList","modal","setModal","csrfToken","cookieValue","document","cookie","cookies","split","i","length","jQuery","substring","decodeURIComponent","getCookie","refreshList","get","headers","then","res","data","catch","err","console","log","displayCompleted","status","useEffect","className","filter","item","map","editItem","delete","handleDelete","put","post","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"sTAae,SAASA,EAAYC,GAAQ,IAAD,EAEHC,mBAASD,EAAME,YAFZ,mBAEhCA,EAFgC,KAEpBC,EAFoB,KAIvC,SAASC,EAAaC,GAAI,IAAD,EACCA,EAAEC,OAAlBC,EADe,EACfA,KAAMC,EADS,EACTA,MAEU,aAAlBH,EAAEC,OAAOG,OACTD,EAAQH,EAAEC,OAAOI,SAGrB,IAAMC,EAAU,2BAAOT,GAAP,kBAAoBK,EAAOC,IAE3CL,EAAcQ,GAbqB,IAgBjCC,EAAmBZ,EAAnBY,OAAQC,EAAWb,EAAXa,OAEd,OACA,eAACC,EAAA,EAAD,CAAOC,QAAQ,EAAMH,OAAQA,EAA7B,UACI,cAACI,EAAA,EAAD,CAAaJ,OAAQA,EAArB,uBACA,cAACK,EAAA,EAAD,UACI,eAACC,EAAA,EAAD,WACI,eAACC,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,IAAI,aAAX,mBACA,cAACC,EAAA,EAAD,CACIb,KAAK,OACLc,GAAG,aACHhB,KAAK,QACLC,MAAON,EAAWsB,MAClBC,SAAUrB,EACVsB,YAAY,wBAGpB,eAACP,EAAA,EAAD,WACI,cAACC,EAAA,EAAD,CAAOC,IAAI,mBAAX,yBACA,cAACC,EAAA,EAAD,CACIb,KAAK,WACLc,GAAG,mBACHhB,KAAK,cACLC,MAAON,EAAWyB,YAClBF,SAAUrB,EACVsB,YAAY,8BAGpB,cAACP,EAAA,EAAD,CAAWS,OAAK,EAAhB,SACI,eAACR,EAAA,EAAD,CAAOQ,OAAK,EAAZ,UACI,cAACN,EAAA,EAAD,CACIb,KAAK,WACLF,KAAK,YACLG,QAASR,EAAW2B,UACpBJ,SAAUrB,IALlB,sBAYZ,cAAC0B,EAAA,EAAD,UACI,cAACC,EAAA,EAAD,CACIC,MAAM,UACNC,QAAS,kBAAMpB,EAAOX,IAF1B,uB,6BClEZgC,IAAMC,SAASC,eAAiB,YAChCF,IAAMC,SAASE,eAAiB,cAgLjBC,MA9Kf,WAAiB,IAAD,EAE8BrC,oBAAS,GAFvC,mBAELsC,EAFK,KAEUC,EAFV,OAIoBvC,mBAAS,IAJ7B,mBAILwC,EAJK,KAIKC,EAJL,OAKczC,oBAAS,GALvB,mBAKL0C,EALK,KAKEC,EALF,OAMwB3C,mBAAS,CACzCuB,MAAO,GACPG,YAAa,GACbE,WAAW,IATH,mBAML3B,EANK,KAMOC,EANP,KAYR0C,EAEJ,SAAmBtC,GACf,IAAIuC,EAAc,KAClB,GAAIC,SAASC,QAA8B,KAApBD,SAASC,OAE5B,IADA,IAAIC,EAAUF,SAASC,OAAOE,MAAM,KAC3BC,EAAI,EAAGA,EAAIF,EAAQG,OAAQD,IAAK,CACrC,IAAIH,EAASK,OAAYJ,EAAQE,IACjC,GAAIH,EAAOM,UAAU,EAAG/C,EAAK6C,OAAS,KAAQ7C,EAAO,IAAM,CACvDuC,EAAcS,mBAAmBP,EAAOM,UAAU/C,EAAK6C,OAAS,IAChE,OAIZ,OAAON,EAdKU,CAAU,aAqB1B,SAASC,IACLvB,IACKwB,IAAI,cAAe,CAChBC,QAAS,CACL,cAAed,KAGtBe,MAAK,SAACC,GAAD,OAASnB,EAAYmB,EAAIC,SAC9BC,OAAM,SAACC,GAAD,OAASC,QAAQC,IAAIF,MAGpC,SAASpD,IACLgC,GAAUD,GAmCd,SAASwB,EAAiBC,GACtB,OACW5B,IADP4B,GA6DR,OAjHAC,qBAAU,WACNZ,MACD,IAgHC,uBAAMa,UAAU,YAAhB,UACI,oBAAIA,UAAU,6CAAd,sBACA,qBAAKA,UAAU,MAAf,SACI,qBAAKA,UAAU,iCAAf,SACI,sBAAKA,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SACI,wBACIA,UAAU,kBACVrC,QAnF5B,WAGI9B,EAFa,CAACqB,MAAO,GAAIG,YAAa,GAAIE,WAAW,IAGrDe,GAAUD,IA6EU,wBA5DhB,sBAAK2B,UAAU,eAAf,UACI,sBACIA,UAAW/B,EAAgB,WAAa,kBACxCN,QAAS,WACLkC,GAAiB,IAHzB,sBAOA,sBACIG,UAAW/B,EAAgB,WAAa,kBACxCN,QAAS,kBAAMkC,GAAiB,IAFpC,2BA4DQ,oBAAIG,UAAU,2CAAd,SAlDC7B,EAAS8B,QACtB,SAACC,GAAD,OAAUA,EAAK3C,YAAcU,KAEjBkC,KAAI,SAACD,GAAD,OAChB,qBAEIF,UAAU,oEAFd,UAIJ,sBACIA,UAAS,0BACL/B,EAAgB,iBAAmB,IAEvCf,MAAOgD,EAAK7C,YAJhB,SAMG6C,EAAKhD,QAEA,iCACN,wBACI8C,UAAU,yBACVrC,QAAS,kBAnDnB,SAAkBuC,GACdrE,EAAcqE,GACd5B,GAAUD,GAiDW+B,CAASF,IAF5B,kBAMA,wBACIF,UAAU,iBACVrC,QAAS,kBAtEnB,SAAsBuC,GAClBtC,IACKyC,OADL,qBAC0BH,EAAKjD,GAD/B,MAEKqC,MAAK,SAACC,GAAD,OAASJ,OAmEEmB,CAAaJ,IAFhC,yBAlBWA,EAAKjD,gBAmDboB,EACG,cAAC,EAAD,CACIzC,WAAYA,EACZU,OAAQA,EACRC,OAvHhB,SAAsB2D,GAClB5D,IAEI4D,EAAKjD,GACLW,IACK2C,IADL,qBACuBL,EAAKjD,GAD5B,KACmCiD,GAC9BZ,MAAK,SAACC,GAAD,OAASJ,OAGvBvB,IACK4C,KAAK,cAAeN,GACpBZ,MAAK,SAACC,GAAD,OAASJ,UA8GX,SCvKDsB,MARf,WACI,OACI,mCACI,cAAC,EAAD,OCMGC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBtB,MAAK,YAAkD,IAA/CuB,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF3C,SAAS4C,eAAe,SAM1BX,M","file":"static/js/main.d83a27e0.chunk.js","sourcesContent":["import {\r\n    Button,\r\n    Modal,\r\n    ModalHeader,\r\n    ModalBody,\r\n    ModalFooter,\r\n    Form,\r\n    FormGroup,\r\n    Input,\r\n    Label,\r\n} from \"reactstrap\";\r\nimport {useState} from \"react\";\r\n\r\nexport default function CustomModal(props) {\r\n\r\n    const [activeItem, setActiveItem] = useState(props.activeItem);\r\n\r\n    function handleChange(e) {\r\n        let { name, value } = e.target;\r\n\r\n        if (e.target.type === \"checkbox\") {\r\n            value = e.target.checked;\r\n        }\r\n\r\n        const ActiveItem = {...activeItem, [name]: value}\r\n\r\n        setActiveItem(ActiveItem);\r\n    }\r\n\r\n    let { toggle, onSave } = props;\r\n\r\n    return (\r\n    <Modal isOpen={true} toggle={toggle}>\r\n        <ModalHeader toggle={toggle}>Todo Item</ModalHeader>\r\n        <ModalBody>\r\n            <Form>\r\n                <FormGroup>\r\n                    <Label for=\"todo-title\">Title</Label>\r\n                    <Input\r\n                        type=\"text\"\r\n                        id=\"todo-title\"\r\n                        name=\"title\"\r\n                        value={activeItem.title}\r\n                        onChange={handleChange}\r\n                        placeholder=\"Enter Todo Title\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup>\r\n                    <Label for=\"todo-description\">Description</Label>\r\n                    <Input\r\n                        type=\"textarea\"\r\n                        id=\"todo-description\"\r\n                        name=\"description\"\r\n                        value={activeItem.description}\r\n                        onChange={handleChange}\r\n                        placeholder=\"Enter Todo description\"\r\n                    />\r\n                </FormGroup>\r\n                <FormGroup check>\r\n                    <Label check>\r\n                        <Input\r\n                            type=\"checkbox\"\r\n                            name=\"completed\"\r\n                            checked={activeItem.completed}\r\n                            onChange={handleChange}\r\n                        />\r\n                        Completed\r\n                    </Label>\r\n                </FormGroup>\r\n            </Form>\r\n        </ModalBody>\r\n        <ModalFooter>\r\n            <Button\r\n                color=\"success\"\r\n                onClick={() => onSave(activeItem)}\r\n            >\r\n                Save\r\n            </Button>\r\n        </ModalFooter>\r\n    </Modal>\r\n    )\r\n\r\n\r\n}\r\n","import {useState, useEffect} from 'react'\r\nimport '../App.css';\r\nimport Modal from './Modal'\r\nimport axios from \"axios\";\r\nimport * as jQuery from 'jquery'\r\n\r\naxios.defaults.xsrfCookieName = 'csrftoken';\r\naxios.defaults.xsrfHeaderName = 'X-CSRFToken';\r\n\r\nfunction Todo() {\r\n\r\n    const [viewCompleted, setViewCompleted] = useState(false);\r\n    // eslint-disable-next-line\r\n    const [todoList, setTodoList] = useState([]);\r\n    const [modal, setModal] = useState(false);\r\n    const [activeItem, setActiveItem] = useState({\r\n        title: \"\",\r\n        description: \"\",\r\n        completed: false,\r\n    })\r\n    // eslint-disable-next-line\r\n    let csrfToken = getCookie('csrftoken')\r\n\r\n    function getCookie(name) {\r\n        let cookieValue = null;\r\n        if (document.cookie && document.cookie !== '') {\r\n            let cookies = document.cookie.split(';');\r\n            for (let i = 0; i < cookies.length; i++) {\r\n                let cookie = jQuery.trim(cookies[i]);\r\n                if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n                    cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return cookieValue;\r\n    }\r\n\r\n    useEffect(() => {\r\n        refreshList()\r\n    }, [])\r\n\r\n    function refreshList() {\r\n        axios\r\n            .get(\"/api/todos/\", {\r\n                headers: {\r\n                    'X-CSRFToken': csrfToken\r\n                }\r\n            })\r\n            .then((res) => setTodoList(res.data))\r\n            .catch((err) => console.log(err));\r\n    }\r\n\r\n    function toggle() {\r\n        setModal(!modal);\r\n    }\r\n\r\n    function handleSubmit(item) {\r\n        toggle();\r\n\r\n        if (item.id) {\r\n            axios\r\n                .put(`/api/todos/${item.id}/`, item)\r\n                .then((res) => refreshList())\r\n            return;\r\n        }\r\n        axios\r\n            .post(\"/api/todos/\", item)\r\n            .then((res) => refreshList());\r\n    }\r\n\r\n    function handleDelete(item) {\r\n        axios\r\n            .delete(`/api/todos/${item.id}/`)\r\n            .then((res) => refreshList());\r\n    }\r\n\r\n    function createItem() {\r\n        const item = {title: \"\", description: \"\", completed: false};\r\n\r\n        setActiveItem(item);\r\n        setModal(!modal)\r\n    };\r\n\r\n    function editItem(item) {\r\n        setActiveItem(item);\r\n        setModal(!modal)\r\n    };\r\n\r\n    function displayCompleted(status) {\r\n        if (status) {\r\n            return setViewCompleted(true);\r\n        }\r\n        return setViewCompleted(false);\r\n    }\r\n\r\n    function renderTabList() {\r\n        return (\r\n            <div className=\"nav nav-tabs\">\r\n                <span\r\n                    className={viewCompleted ? \"nav-link\" : \"nav-link active\"}\r\n                    onClick={() => {\r\n                        displayCompleted(true)\r\n                    }}>\r\n                    Complete\r\n                </span>\r\n                <span\r\n                    className={viewCompleted ? \"nav-link\" : \"nav-link active\"}\r\n                    onClick={() => displayCompleted(false)}>\r\n                    Incomplete\r\n                </span>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    function renderItems() {\r\n        const newItems = todoList.filter(\r\n            (item) => item.completed === viewCompleted\r\n        )\r\n        return newItems.map((item) => (\r\n            <li\r\n                key={item.id}\r\n                className=\"list-group-item d-flex justify-content-between align-items-center\"\r\n            >\r\n        <span\r\n            className={`todo-title mr-2 ${\r\n                viewCompleted ? \"completed-todo\" : \"\"\r\n            }`}\r\n            title={item.description}\r\n        >\r\n          {item.title}\r\n        </span>\r\n                <span>\r\n          <button\r\n              className=\"btn btn-secondary mr-2\"\r\n              onClick={() => editItem(item)}\r\n          >\r\n            Edit\r\n          </button>\r\n          <button\r\n              className=\"btn btn-danger\"\r\n              onClick={() => handleDelete(item)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </span>\r\n            </li>\r\n        ));\r\n\r\n    }\r\n\r\n    return (\r\n        <main className=\"container\">\r\n            <h1 className=\"text-white text-uppercase text-center my-4\">Todo app</h1>\r\n            <div className=\"row\">\r\n                <div className=\"col-md-6 col-sm-10 mx-auto p-0\">\r\n                    <div className=\"card p-3\">\r\n                        <div className=\"mb-4\">\r\n                            <button\r\n                                className=\"btn btn-primary\"\r\n                                onClick={createItem}\r\n                            >\r\n                                Add task\r\n                            </button>\r\n                        </div>\r\n                        {renderTabList()}\r\n                        <ul className=\"list-group list-group-flush border-top-0\">\r\n                            {renderItems()}\r\n                        </ul>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            {modal ? (\r\n                <Modal\r\n                    activeItem={activeItem}\r\n                    toggle={toggle}\r\n                    onSave={handleSubmit}\r\n                />\r\n            ) : null}\r\n        </main>\r\n    );\r\n}\r\n\r\nexport default Todo;\r\n","import './App.css';\nimport Todo from \"./TodoComp/Todo\";\n\nfunction App() {\n    return (\n        <>\n            <Todo />\n        </>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}